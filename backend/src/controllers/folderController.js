import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

// ‡∏î‡∏∂‡∏á‡πÅ‡∏ü‡πâ‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export const getFolders = async (req, res) => {
  try {
    const folders = await prisma.folder.findMany({
      include: {
        createdBy: { select: { id: true, name: true, username: true } },
        documents: { select: { id: true, docNumber: true, subject: true } },
        statusLogs: {
          include: {
            user: { select: { id: true, name: true, username: true } } // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
          },
          orderBy: { startedAt: 'desc' }
        },
      },
      orderBy: { createdAt: 'desc' }
    })
    res.status(200).json(folders)
  } catch (error) {
    console.error('Error fetching folders:', error)
    res.status(500).json({ message: 'Failed to fetch folders', error: error.message })
  }
}

// ‡∏î‡∏∂‡∏á‡πÅ‡∏ü‡πâ‡∏°‡∏ï‡∏≤‡∏° ID
export const getFolderById = async (req, res) => {
  const id = parseInt(req.params.id)
  if (isNaN(id)) return res.status(400).json({ message: 'Invalid folder ID' })

  try {
    const folder = await prisma.folder.findUnique({
      where: { id },
      include: {
        createdBy: { select: { id: true, name: true, username: true } },
        documents: { select: { id: true, docNumber: true, subject: true } },
        statusLogs: {
          include: {
            user: { select: { id: true, name: true, username: true } }
          },
          orderBy: { startedAt: 'desc' }
        },
      }
    })
    if (!folder) return res.status(404).json({ message: 'Folder not found' })
    res.status(200).json(folder)
  } catch (error) {
    console.error('Error fetching folder:', error)
    res.status(500).json({ message: 'Failed to fetch folder', error: error.message })
  }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ü‡πâ‡∏°‡πÉ‡∏´‡∏°‡πà
export const createFolder = async (req, res) => {
  try {
    const { title, createdById, qrToken } = req.body

    if (!title || !createdById || !qrToken) {
      return res.status(400).json({ message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' })
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ü‡πâ‡∏°‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô statusLogs
    const newFolder = await prisma.folder.create({
      data: {
        title,
        createdById: Number(createdById),
        qrToken,
        status: 'ARCHIVED',  // ‡∏Ñ‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö enum FolderStatus
        statusLogs: {
          create: {
            status: 'ARCHIVED',
            startedAt: new Date(),
            userId: Number(createdById), // ‡∏Ñ‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ü‡πâ‡∏°‡∏ñ‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
          }
        }
      },
      include: {
        statusLogs: true
      }
    })

    res.status(201).json(newFolder)
  } catch (error) {
    console.error('Create folder error:', error)
    res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ü‡πâ‡∏°‡πÑ‡∏î‡πâ', error: error.message })
  }
}

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏ü‡πâ‡∏°

export const updateFolder = async (req, res) => {
  const id = parseInt(req.params.id)
  if (isNaN(id)) return res.status(400).json({ message: 'Invalid folder ID' })

  // department ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô string ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠ enum ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô "STRATEGIC_AND_PROJECTS"
  // ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤ department ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  const { title, qrToken, status, department, remark, userId } = req.body

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ enum ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
  const validDepartments = [
    'STRATEGIC_AND_PROJECTS',
    'FINANCE_GROUP',
    'HUMAN_RESOURCES',
    'NURSING_GROUP',
    'SECRETARIAT',
    'DIGITAL_HEALTH_MISSION',
    'SUPPLY_GROUP'
  ]

  if (department && !validDepartments.includes(department)) {
    return res.status(400).json({ message: '‡∏Ñ‡πà‡∏≤ department ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' })
  }

  try {
    const existingFolder = await prisma.folder.findUnique({
      where: { id },
      include: { statusLogs: { orderBy: { startedAt: 'desc' }, take: 1 } }
    })
    if (!existingFolder) return res.status(404).json({ message: 'Folder not found' })

    const updateData = {}
    if (title !== undefined) updateData.title = title
    if (qrToken !== undefined) updateData.qrToken = qrToken

    if (status !== undefined && status !== existingFolder.status) {
      if (!userId) {
        return res.status(400).json({ message: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ userId ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞' })
      }

      // ‡∏õ‡∏¥‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î
      const lastStatusLog = existingFolder.statusLogs[0]
      if (lastStatusLog && !lastStatusLog.endedAt) {
        await prisma.folderStatusLog.update({
          where: { id: lastStatusLog.id },
          data: { endedAt: new Date() }
        })
      }

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏ü‡πâ‡∏°
      await prisma.folder.update({
        where: { id },
        data: { status }
      })

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á statusLog ‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å department (enum) ‡πÅ‡∏•‡∏∞ remark
      await prisma.folderStatusLog.create({
        data: {
          folderId: id,
          status,
          startedAt: new Date(),
          userId: Number(userId),
          department: department || null,
          remark: remark || null,
        }
      })
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
    if (Object.keys(updateData).length > 0) {
      await prisma.folder.update({
        where: { id },
        data: updateData
      })
    }

    const updatedFolder = await prisma.folder.findUnique({
      where: { id },
      include: {
        statusLogs: {
          include: { user: { select: { id: true, name: true, username: true } } },
          orderBy: { startedAt: 'desc' }
        }
      }
    })

    res.status(200).json(updatedFolder)
  } catch (error) {
    console.error('Error updating folder:', error)
    res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏ü‡πâ‡∏°‡πÑ‡∏î‡πâ', error: error.message })
  }
}


// ‡∏•‡∏ö‡πÅ‡∏ü‡πâ‡∏°
export const deleteFolder = async (req, res) => {
  const id = parseInt(req.params.id);
  if (isNaN(id)) return res.status(400).json({ message: 'Invalid folder ID' });

  try {
    // ‚è≥ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ documents ‡πÅ‡∏•‡∏∞ statusLogs ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á
    const docs = await prisma.document.findMany({ where: { folderId: id } });
    console.log('üìÅ Documents to delete:', docs);

    const logs = await prisma.folderStatusLog.findMany({ where: { folderId: id } });
    console.log('üìú StatusLogs to delete:', logs);

    // üî• 1. ‡∏•‡∏ö StatusLogs
    await prisma.folderStatusLog.deleteMany({
      where: { folderId: id },
    });

    // üî• 2. ‡∏•‡∏ö Documents
    await prisma.document.deleteMany({
      where: { folderId: id },
    });

    // ‚úÖ 3. ‡∏•‡∏ö‡πÅ‡∏ü‡πâ‡∏°
    await prisma.folder.delete({
      where: { id },
    });

    res.status(200).json({ message: '‡∏•‡∏ö‡πÅ‡∏ü‡πâ‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (error) {
    console.error('‚ùå ‡∏•‡∏ö‡πÅ‡∏ü‡πâ‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
    res.status(500).json({
      message: '‡∏•‡∏ö‡πÅ‡∏ü‡πâ‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      error: error.message,
      code: error.code,
    });
  }
};







